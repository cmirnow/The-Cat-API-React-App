{"version":3,"file":"static/js/772.794aaabd.chunk.js","mappings":"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","sources":["components/RandomComponent.js","services/catApiService.js"],"sourcesContent":["import React, { useState, useEffect, memo } from \"react\";\nimport { debounce } from \"lodash\";\nimport { fetchRandomCatImage } from \"../services/catApiService\";\n\nconst STATUS_FETCHING = \"fetching\";\nconst STATUS_FETCHED = \"fetched\";\nconst STATUS_LOADED = \"loaded\";\nconst STATUS_ERROR = \"error\";\n\nconst debouncedFetchRandomCat = debounce((setLoadingState, setImage) => {\n  setLoadingState(STATUS_FETCHING);\n  fetchRandomCatImage(setImage)\n    .then(() => setLoadingState(STATUS_FETCHED))\n    .catch(() => setLoadingState(STATUS_ERROR));\n}, 500);\n\nconst RandomComponent = memo(() => {\n  const [image, setImage] = useState(null);\n  const [loadingState, setLoadingState] = useState(STATUS_FETCHING);\n\n  useEffect(() => {\n    debouncedFetchRandomCat(setLoadingState, setImage);\n  }, []);\n\n  return (\n    <div className=\"random\">\n      <div>\n        <button\n          className=\"btn btn-info\"\n          onClick={() => debouncedFetchRandomCat(setLoadingState, setImage)}\n          style={{ marginTop: \"1rem\" }}\n        >\n          Get Random Cat!\n        </button>\n      </div>\n      <div>\n        {loadingState === STATUS_FETCHING && (\n          <div\n            className=\"spinner-border text-warning\"\n            style={{ width: \"5rem\", height: \"5rem\", margin: \"60px auto\" }}\n            role=\"status\"\n          >\n            <span className=\"visually-hidden\">Loading...</span>\n          </div>\n        )}\n        {loadingState === STATUS_ERROR && (\n          <p style={{ color: \"red\", margin: \"60px auto\" }}>\n            Failed to load cat image. Try again!\n          </p>\n        )}\n        {loadingState !== STATUS_FETCHING && loadingState !== STATUS_ERROR && image && (\n          <img\n            onLoad={() => setLoadingState(STATUS_LOADED)}\n            onError={() => setLoadingState(STATUS_ERROR)}\n            style={{\n              display: loadingState === STATUS_LOADED ? \"inline\" : \"none\",\n            }}\n            src={image}\n            alt=\"Random Cat\"\n          />\n        )}\n      </div>\n    </div>\n  );\n});\n\nexport default RandomComponent;\n","const cache = {};\nconst BASE_URL = \"https://api.thecatapi.com/v1\";\nconst API_KEY = process.env.REACT_APP_THECAT_API_KEY;\n\nconst fetchWithTimeout = async (url, options, timeout = 10000) => {\n  const controller = new AbortController();\n  const id = setTimeout(() => controller.abort(), timeout);\n  const response = await fetch(url, { ...options, signal: controller.signal });\n  clearTimeout(id);\n  return response;\n};\n\nexport const fetchRandomCatImage = async (setImage, retries = 3) => {\n  const url = `${BASE_URL}/images/search?timestamp=${Date.now()}`;\n  if (cache[url]) {\n    setImage(cache[url][0].url);\n    return true;\n  }\n\n  for (let attempt = 0; attempt < retries; attempt++) {\n    try {\n      const response = await fetchWithTimeout(url, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-api-key\": API_KEY,\n        },\n      }, 10000);\n      if (!response.ok) throw new Error(`HTTP error ${response.status}`);\n      const data = await response.json();\n      if (!data[0]?.url) throw new Error(\"No image URL in response\");\n      cache[url] = data;\n      setImage(data[0].url);\n      return true;\n    } catch (error) {\n      if (attempt === retries - 1) {\n        console.error(\"Failed to fetch random cat after retries:\", error.message);\n        throw error;\n      }\n      await new Promise((resolve) => setTimeout(resolve, 1000 * (attempt + 1)));\n    }\n  }\n};\n\nexport const fetchCatBreeds = async (setBreeds, retries = 3) => {\n  const url = `${BASE_URL}/breeds`;\n  if (cache[url]) {\n    setBreeds(cache[url].filter((img) => img.image?.url != null));\n    return true;\n  }\n\n  for (let attempt = 0; attempt < retries; attempt++) {\n    try {\n      const response = await fetchWithTimeout(url, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-api-key\": API_KEY,\n        },\n      }, 10000);\n      if (!response.ok) throw new Error(`HTTP error ${response.status}`);\n      const data = await response.json();\n      cache[url] = data;\n      setBreeds(data.filter((img) => img.image?.url != null));\n      return true;\n    } catch (error) {\n      if (attempt === retries - 1) {\n        console.error(\"Failed to fetch cat breeds after retries:\", error.message);\n        throw error;\n      }\n      await new Promise((resolve) => setTimeout(resolve, 1000 * (attempt + 1)));\n    }\n  }\n};\n"],"names":["STATUS_FETCHING","STATUS_LOADED","STATUS_ERROR","debouncedFetchRandomCat","debounce","setLoadingState","setImage","fetchRandomCatImage","then","catch","memo","image","useState","loadingState","useEffect","_jsxs","className","children","_jsx","onClick","style","marginTop","width","height","margin","role","color","onLoad","onError","display","src","alt","cache","BASE_URL","API_KEY","process","fetchWithTimeout","async","url","options","timeout","arguments","length","undefined","controller","AbortController","id","setTimeout","abort","response","fetch","signal","clearTimeout","retries","Date","now","attempt","_data$","headers","ok","Error","status","data","json","error","console","message","Promise","resolve","fetchCatBreeds","setBreeds","filter","img","_img$image","_img$image2"],"sourceRoot":""}