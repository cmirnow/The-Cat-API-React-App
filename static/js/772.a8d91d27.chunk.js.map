{"version":3,"file":"static/js/772.a8d91d27.chunk.js","mappings":"8LAIA,MAAMA,EAAkB,WAElBC,EAAgB,SAEhBC,GAA0BC,EAAAA,EAAAA,WAAS,CAACC,EAAiBC,KACzDD,EAAgBJ,IAChBM,EAAAA,EAAAA,GAAoBD,GACjBE,MAAK,IAAMH,EANO,aAOlBI,OAAOC,GAAUC,QAAQD,MAAM,6BAA8BA,EAAME,UAAS,GAC9E,KA6CH,GA3CwBC,EAAAA,EAAAA,OAAK,KAC3B,MAAOC,EAAOR,IAAYS,EAAAA,EAAAA,UAAS,OAC5BC,EAAcX,IAAmBU,EAAAA,EAAAA,UAASd,GAMjD,OAJAgB,EAAAA,EAAAA,YAAU,KACRd,EAAwBE,EAAiBC,EAAS,GACjD,KAGDY,EAAAA,EAAAA,MAAA,OAAKC,UAAU,SAAQC,SAAA,EACrBC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,UACEF,UAAU,eACVG,QAASA,IAAMnB,EAAwBE,EAAiBC,GAAUc,SACnE,uBAIHF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CACGJ,IAAiBd,IAChBmB,EAAAA,EAAAA,KAAA,OACEF,UAAU,8BACVI,MAAO,CAAEC,MAAO,OAAQC,OAAQ,OAAQC,OAAQ,aAChDC,KAAK,SAAQP,UAEbC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,kBAAiBC,SAAC,iBAGrCJ,IAAiBf,GAAmBa,IACnCO,EAAAA,EAAAA,KAAA,OACEO,OAAQA,IAAMvB,EAAgBH,GAC9BqB,MAAO,CACLM,QAASb,IAAiBd,EAAgB,SAAW,QAEvD4B,IAAKhB,EACLiB,IAAI,oBAIN,G,yCCtDV,MAAMC,EAAQ,CAAC,EACTC,EAAW,+BACXC,EAAUC,wEAEH5B,EAAsB6B,UACjC,MAAMC,EAAM,GAAGJ,kBACf,GAAID,EAAMK,GACR/B,EAAS0B,EAAMK,GAAK,GAAGA,UAIzB,IACE,MAAMC,QAAiBC,MAAMF,EAAK,CAChCG,QAAS,CACP,eAAgB,mBAChB,YAAaN,KAGjB,IAAKI,EAASG,GAAI,MAAM,IAAIC,MAAM,oCAClC,MAAMC,QAAaL,EAASM,OAC5BZ,EAAMK,GAAOM,EACbrC,EAASqC,EAAK,GAAGN,IACnB,CAAE,MAAO3B,GACP,MAAMA,CACR,GAGWmC,EAAiBT,UAC5B,MAAMC,EAAM,GAAGJ,WACf,GAAID,EAAMK,GACRS,EAAUd,EAAMK,GAAKU,QAAQC,IAAG,IAAAC,EAAA,OAAuB,OAAT,QAATA,EAAAD,EAAIlC,aAAK,IAAAmC,OAAA,EAATA,EAAWZ,IAAW,UAI7D,IACE,MAAMC,QAAiBC,MAAMF,EAAK,CAChCG,QAAS,CACP,eAAgB,mBAChB,YAAaN,KAGjB,IAAKI,EAASG,GAAI,MAAM,IAAIC,MAAM,8BAClC,MAAMC,QAAaL,EAASM,OAC5BZ,EAAMK,GAAOM,EACbG,EAAUH,EAAKI,QAAQC,IAAG,IAAAE,EAAA,OAAuB,OAAT,QAATA,EAAAF,EAAIlC,aAAK,IAAAoC,OAAA,EAATA,EAAWb,IAAW,IACvD,CAAE,MAAO3B,GACP,MAAMA,CACR,E","sources":["components/RandomComponent.js","services/catApiService.js"],"sourcesContent":["import React, { useState, useEffect, memo } from \"react\";\nimport { debounce } from \"lodash\";\nimport { fetchRandomCatImage } from \"../services/catApiService\";\n\nconst STATUS_FETCHING = \"fetching\";\nconst STATUS_FETCHED = \"fetched\";\nconst STATUS_LOADED = \"loaded\";\n\nconst debouncedFetchRandomCat = debounce((setLoadingState, setImage) => {\n  setLoadingState(STATUS_FETCHING);\n  fetchRandomCatImage(setImage)\n    .then(() => setLoadingState(STATUS_FETCHED))\n    .catch((error) => console.error(\"Error fetching random cat:\", error.message));\n}, 500);\n\nconst RandomComponent = memo(() => {\n  const [image, setImage] = useState(null);\n  const [loadingState, setLoadingState] = useState(STATUS_FETCHING);\n\n  useEffect(() => {\n    debouncedFetchRandomCat(setLoadingState, setImage);\n  }, []);\n\n  return (\n    <div className=\"random\">\n      <div>\n        <button\n          className=\"btn btn-info\"\n          onClick={() => debouncedFetchRandomCat(setLoadingState, setImage)}\n        >\n          Get Random Cat!\n        </button>\n      </div>\n      <div>\n        {loadingState !== STATUS_LOADED && (\n          <div\n            className=\"spinner-border text-warning\"\n            style={{ width: \"5rem\", height: \"5rem\", margin: \"60px auto\" }}\n            role=\"status\"\n          >\n            <span className=\"visually-hidden\">Loading...</span>\n          </div>\n        )}\n        {loadingState !== STATUS_FETCHING && image && (\n          <img\n            onLoad={() => setLoadingState(STATUS_LOADED)}\n            style={{\n              display: loadingState === STATUS_LOADED ? \"inline\" : \"none\",\n            }}\n            src={image}\n            alt=\"Random Cat\"\n          />\n        )}\n      </div>\n    </div>\n  );\n});\n\nexport default RandomComponent;\n","const cache = {};\nconst BASE_URL = \"https://api.thecatapi.com/v1\";\nconst API_KEY = process.env.REACT_APP_THECAT_API_KEY;\n\nexport const fetchRandomCatImage = async (setImage) => {\n  const url = `${BASE_URL}/images/search`;\n  if (cache[url]) {\n    setImage(cache[url][0].url);\n    return;\n  }\n\n  try {\n    const response = await fetch(url, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-api-key\": API_KEY,\n      },\n    });\n    if (!response.ok) throw new Error(\"Failed to fetch random cat image\");\n    const data = await response.json();\n    cache[url] = data;\n    setImage(data[0].url);\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const fetchCatBreeds = async (setBreeds) => {\n  const url = `${BASE_URL}/breeds`;\n  if (cache[url]) {\n    setBreeds(cache[url].filter((img) => img.image?.url != null));\n    return;\n  }\n\n  try {\n    const response = await fetch(url, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-api-key\": API_KEY,\n      },\n    });\n    if (!response.ok) throw new Error(\"Failed to fetch cat breeds\");\n    const data = await response.json();\n    cache[url] = data;\n    setBreeds(data.filter((img) => img.image?.url != null));\n  } catch (error) {\n    throw error;\n  }\n};\n"],"names":["STATUS_FETCHING","STATUS_LOADED","debouncedFetchRandomCat","debounce","setLoadingState","setImage","fetchRandomCatImage","then","catch","error","console","message","memo","image","useState","loadingState","useEffect","_jsxs","className","children","_jsx","onClick","style","width","height","margin","role","onLoad","display","src","alt","cache","BASE_URL","API_KEY","process","async","url","response","fetch","headers","ok","Error","data","json","fetchCatBreeds","setBreeds","filter","img","_img$image","_img$image2"],"sourceRoot":""}